openapi: "3.0.3"

info:
  title: Loja API
  version: v1

tags:
  - name: Products
    description: "Everything about your Products"
  - name: Categories
    description: "Everything about your Categories"
  - name: Purchase
    description: "Everything about your Purchases"


paths:
  /products:
    get:
      summary: Get all products
      operationId: getAllProducts
      tags:
        - Products
      responses:
        200:
          description: OK - Successfully return a list of product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      requestBody:
        description: A JSON object containing product information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        200:
          description: Created a new Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
  /products/{productId}:
    put:
      summary: Update a product by id
      operationId: updateProductById
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: A JSON object containing product information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        404:
          description: Not found
    get:
      summary: Get a product
      operationId: getProductById
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        404:
          description: Not found
    delete:
      summary: delete an existing product
      operationId: deleteProductById
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: No Content
        404:
          description: Not found

  /categories:
    get:
      summary: Get all categories
      operationId: getAllCategories
      tags:
        - Categories
      responses:
        200:
          description: OK - Successfully return a list of category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
    post:
      summary: Create a new category
      operationId: createCategory
      tags:
        - Categories
      requestBody:
        description: A JSON object containing category information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        200:
          description: Created a new Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /categories/{categoryId}:
    put:
      summary: Update a category by id
      operationId: updateCategoryById
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: A JSON object containing category information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        404:
          description: Not found
    get:
      summary: Get a category
      operationId: getCategoryById
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        404:
          description: Not found
    delete:
      summary: delete an existing category
      operationId: deleteCategoryById
      tags:
        - Categories
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: No Content
        404:
          description: Not found
  /purchases:
    get:
      summary: Get All Purchases
      operationId: getAllPurchases
      tags:
        - Purchases
      responses:
        200:
          description: OK - Successfully return a list of Purchase
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchaseResponse'
    post:
      summary: Create a new Purchase
      operationId: createPurchase
      tags:
        - Purchases
      requestBody:
        description: A JSON object containing category information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        200:
          description: Created a new Purchase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseResponse'
  /purchases/{purchaseId}:
    get:
      summary: Get a Purchase
      operationId: getPurchaseById
      tags:
        - Purchases
      parameters:
        - in: path
          name: purchaseId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseResponse'
        404:
          description: Not found

components:
  schemas:
    ProductRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          example: 11.9
        available:
          type: string
        categoryId:
          type: integer
          format: int64
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          example: 11.9
        available:
          type: string
        category:
          $ref: '#/components/schemas/CategoryResponse'
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PurchaseResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        price:
          type: number
          example: 11.9
        status:
          type: string
        emailUser:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
    PurchaseRequest:
      type: object
      properties:
        price:
          type: number
          example: 11.9
        status:
          type: string
        emailUser:
          type: string
        productsId:
          type: array
          items:
            type: integer
            format: int64